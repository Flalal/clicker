/*
 * This file is generated by jOOQ.
 */
package fr.flalal.clicker.storage.tables;


import fr.flalal.clicker.storage.Clicker;
import fr.flalal.clicker.storage.Keys;
import fr.flalal.clicker.storage.tables.records.GeneratorRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Generator extends TableImpl<GeneratorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>clicker.generator</code>
     */
    public static final Generator GENERATOR = new Generator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeneratorRecord> getRecordType() {
        return GeneratorRecord.class;
    }

    /**
     * The column <code>clicker.generator.id</code>.
     */
    public final TableField<GeneratorRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>clicker.generator.name</code>.
     */
    public final TableField<GeneratorRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>clicker.generator.description</code>.
     */
    public final TableField<GeneratorRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>clicker.generator.enabled</code>.
     */
    public final TableField<GeneratorRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Generator(Name alias, Table<GeneratorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Generator(Name alias, Table<GeneratorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>clicker.generator</code> table reference
     */
    public Generator(String alias) {
        this(DSL.name(alias), GENERATOR);
    }

    /**
     * Create an aliased <code>clicker.generator</code> table reference
     */
    public Generator(Name alias) {
        this(alias, GENERATOR);
    }

    /**
     * Create a <code>clicker.generator</code> table reference
     */
    public Generator() {
        this(DSL.name("generator"), null);
    }

    public <O extends Record> Generator(Table<O> child, ForeignKey<O, GeneratorRecord> key) {
        super(child, key, GENERATOR);
    }

    @Override
    public Schema getSchema() {
        return Clicker.CLICKER;
    }

    @Override
    public UniqueKey<GeneratorRecord> getPrimaryKey() {
        return Keys.GENERATOR_PKEY;
    }

    @Override
    public List<UniqueKey<GeneratorRecord>> getKeys() {
        return Arrays.<UniqueKey<GeneratorRecord>>asList(Keys.GENERATOR_PKEY);
    }

    @Override
    public Generator as(String alias) {
        return new Generator(DSL.name(alias), this);
    }

    @Override
    public Generator as(Name alias) {
        return new Generator(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Generator rename(String name) {
        return new Generator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Generator rename(Name name) {
        return new Generator(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
