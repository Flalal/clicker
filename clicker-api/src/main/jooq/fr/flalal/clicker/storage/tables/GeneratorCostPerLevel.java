/*
 * This file is generated by jOOQ.
 */
package fr.flalal.clicker.storage.tables;


import fr.flalal.clicker.storage.Clicker;
import fr.flalal.clicker.storage.Keys;
import fr.flalal.clicker.storage.tables.records.GeneratorCostPerLevelRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeneratorCostPerLevel extends TableImpl<GeneratorCostPerLevelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>clicker.generator_cost_per_level</code>
     */
    public static final GeneratorCostPerLevel GENERATOR_COST_PER_LEVEL = new GeneratorCostPerLevel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeneratorCostPerLevelRecord> getRecordType() {
        return GeneratorCostPerLevelRecord.class;
    }

    /**
     * The column <code>clicker.generator_cost_per_level.id_generator</code>.
     */
    public final TableField<GeneratorCostPerLevelRecord, UUID> ID_GENERATOR = createField(DSL.name("id_generator"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>clicker.generator_cost_per_level.level</code>.
     */
    public final TableField<GeneratorCostPerLevelRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>clicker.generator_cost_per_level.cost</code>.
     */
    public final TableField<GeneratorCostPerLevelRecord, BigDecimal> COST = createField(DSL.name("cost"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>clicker.generator_cost_per_level.click_per_second</code>.
     */
    public final TableField<GeneratorCostPerLevelRecord, BigDecimal> CLICK_PER_SECOND = createField(DSL.name("click_per_second"), SQLDataType.NUMERIC.nullable(false), this, "");

    private GeneratorCostPerLevel(Name alias, Table<GeneratorCostPerLevelRecord> aliased) {
        this(alias, aliased, null);
    }

    private GeneratorCostPerLevel(Name alias, Table<GeneratorCostPerLevelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>clicker.generator_cost_per_level</code> table reference
     */
    public GeneratorCostPerLevel(String alias) {
        this(DSL.name(alias), GENERATOR_COST_PER_LEVEL);
    }

    /**
     * Create an aliased <code>clicker.generator_cost_per_level</code> table reference
     */
    public GeneratorCostPerLevel(Name alias) {
        this(alias, GENERATOR_COST_PER_LEVEL);
    }

    /**
     * Create a <code>clicker.generator_cost_per_level</code> table reference
     */
    public GeneratorCostPerLevel() {
        this(DSL.name("generator_cost_per_level"), null);
    }

    public <O extends Record> GeneratorCostPerLevel(Table<O> child, ForeignKey<O, GeneratorCostPerLevelRecord> key) {
        super(child, key, GENERATOR_COST_PER_LEVEL);
    }

    @Override
    public Schema getSchema() {
        return Clicker.CLICKER;
    }

    @Override
    public UniqueKey<GeneratorCostPerLevelRecord> getPrimaryKey() {
        return Keys.GENERATOR_COST_PER_LEVEL_PKEY;
    }

    @Override
    public List<UniqueKey<GeneratorCostPerLevelRecord>> getKeys() {
        return Arrays.<UniqueKey<GeneratorCostPerLevelRecord>>asList(Keys.GENERATOR_COST_PER_LEVEL_PKEY);
    }

    @Override
    public List<ForeignKey<GeneratorCostPerLevelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GeneratorCostPerLevelRecord, ?>>asList(Keys.GENERATOR_COST_PER_LEVEL__GENERATOR_COST_PER_LEVEL_ID_GENERATOR_FKEY);
    }

    private transient Generator _generator;

    public Generator generator() {
        if (_generator == null)
            _generator = new Generator(this, Keys.GENERATOR_COST_PER_LEVEL__GENERATOR_COST_PER_LEVEL_ID_GENERATOR_FKEY);

        return _generator;
    }

    @Override
    public GeneratorCostPerLevel as(String alias) {
        return new GeneratorCostPerLevel(DSL.name(alias), this);
    }

    @Override
    public GeneratorCostPerLevel as(Name alias) {
        return new GeneratorCostPerLevel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GeneratorCostPerLevel rename(String name) {
        return new GeneratorCostPerLevel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeneratorCostPerLevel rename(Name name) {
        return new GeneratorCostPerLevel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Integer, BigDecimal, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
